<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄杰|博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hj0913.github.io/"/>
  <updated>2019-07-25T08:59:20.654Z</updated>
  <id>https://hj0913.github.io/</id>
  
  <author>
    <name>Huang Jie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式事务探索</title>
    <link href="https://hj0913.github.io/2019/07/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A2%E7%B4%A2/"/>
    <id>https://hj0913.github.io/2019/07/24/分布式事务探索/</id>
    <published>2019-07-24T09:43:57.000Z</published>
    <updated>2019-07-25T08:59:20.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道你是否遇到过这样的情况，去小卖铺买东西，付了钱，但是店主因为处理了一些其他事，居然忘记你付了钱，又叫你重新付。又或者在网上购物明明已经扣款，但是却告诉我没有发生交易。这一系列情况都是因为没有事务导致的。这说明了事务在生活中的一些重要性。有了事务，你去小卖铺买东西，那就是一手交钱一手交货。有了事务，你去网上购物，扣款即产生订单交易。</p><h3 id="事务的具体定义"><a href="#事务的具体定义" class="headerlink" title="事务的具体定义"></a>事务的具体定义</h3><p>事务提供一种机制将一个活动涉及的所有操作纳入到一个不可分割的执行单元，组成事务的所有操作只有在所有操作均能正常执行的情况下方能提交，只要其中任一操作执行失败，都将导致整个事务的回滚。简单地说，事务提供一种“要么什么都不做，要么做全套（All or Nothing）”机制。</p><h3 id="数据库本地事务"><a href="#数据库本地事务" class="headerlink" title="数据库本地事务"></a>数据库本地事务</h3><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><p>说到数据库事务就不得不说，数据库事务中的四大特性，ACID:</p><ul><li>A:原子性(Atomicity)<br>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。<br>就像你买东西要么交钱收货一起都执行，要么要是发不出货，就退钱。</li><li>C:一致性(Consistency)<br>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</li><li>I:隔离性(Isolation)<br>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。<br>打个比方，你买东西这个事情，是不影响其他人的。</li><li>D:持久性(Durability)<br>指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。<br>打个比方，你买东西的时候需要记录在账本上，即使老板忘记了那也有据可查。<h4 id="InnoDB实现原理"><a href="#InnoDB实现原理" class="headerlink" title="InnoDB实现原理"></a>InnoDB实现原理</h4>InnoDB是mysql的一个存储引擎，大部分人对mysql都比较熟悉，这里简单介绍一下数据库事务实现的一些基本原理，在本地事务中，服务和资源在事务的包裹下可以看做是一体的:<br><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/dis-transaction/164d65a2768cd3d6.JPG" alt="事务"><br>我们的本地事务由资源管理器进行管理:<br><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/dis-transaction/clipboard.png" alt="InnoDB"><br>而事务的ACID是通过InnoDB日志和锁来保证。事务的隔离性是通过数据库锁的机制实现的，持久性通过redo log（重做日志）来实现，原子性和一致性通过Undo log来实现。UndoLog的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLog）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。 和Undo Log相反，RedoLog记录的是新数据的备份。在事务提交前，只要将RedoLog持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。 对具体实现过程有兴趣的同学可以去自行搜索扩展。</li></ul><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h4 id="什么是分布式事务"><a href="#什么是分布式事务" class="headerlink" title="什么是分布式事务"></a>什么是分布式事务</h4><h4 id="分布式事务产生的原因"><a href="#分布式事务产生的原因" class="headerlink" title="分布式事务产生的原因"></a>分布式事务产生的原因</h4><h5 id="service多个节点"><a href="#service多个节点" class="headerlink" title="service多个节点"></a>service多个节点</h5><h5 id="resource多个节点"><a href="#resource多个节点" class="headerlink" title="resource多个节点"></a>resource多个节点</h5><h4 id="分布式事务的基础"><a href="#分布式事务的基础" class="headerlink" title="分布式事务的基础"></a>分布式事务的基础</h4><h5 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h5><h5 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h5><h4 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h4><h5 id="是否真的要分布式事务"><a href="#是否真的要分布式事务" class="headerlink" title="是否真的要分布式事务"></a>是否真的要分布式事务</h5><h5 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h5><h5 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h5><h5 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h5><h5 id="MQ事务"><a href="#MQ事务" class="headerlink" title="MQ事务"></a>MQ事务</h5><h5 id="Saga事务"><a href="#Saga事务" class="headerlink" title="Saga事务"></a>Saga事务</h5><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知道你是否遇到过这样的情况，去小卖铺买东西，付了钱，但是店主因为处理了一些其他事，居然忘记你付了钱，又叫你重新付。又或者在网上购物明明已经
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://hj0913.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="https://hj0913.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker-swarm模式下Springcloud容器相互注册</title>
    <link href="https://hj0913.github.io/2019/07/24/docker-swarm%E6%A8%A1%E5%BC%8F%E4%B8%8BSpringcloud%E5%AE%B9%E5%99%A8%E7%9B%B8%E4%BA%92%E6%B3%A8%E5%86%8C/"/>
    <id>https://hj0913.github.io/2019/07/24/docker-swarm模式下Springcloud容器相互注册/</id>
    <published>2019-07-24T08:04:10.000Z</published>
    <updated>2019-07-24T08:04:10.906Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>修改docker日志目录</title>
    <link href="https://hj0913.github.io/2019/07/23/%E4%BF%AE%E6%94%B9docker%E6%97%A5%E5%BF%97%E7%9B%AE%E5%BD%95/"/>
    <id>https://hj0913.github.io/2019/07/23/修改docker日志目录/</id>
    <published>2019-07-23T04:35:54.000Z</published>
    <updated>2019-07-24T08:47:47.817Z</updated>
    
    <content type="html"><![CDATA[<p>默认安装完成docker后docker的所有images及相关信息存储位置为：/var/lib/docker</p><p>镜像默认路径: /var/lib/docker/containers/</p><p>而通常我们的系统盘挂载一般不会很大，所以需要将其移到其他分区，我们可以采用</p><h3 id="一，软链接的方式"><a href="#一，软链接的方式" class="headerlink" title="一，软链接的方式"></a>一，软链接的方式</h3><ol><li><p>首先暂停docker服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker.service</span><br></pre></td></tr></table></figure></li><li><p>将文件移到指定目录</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib</span><br><span class="line"><span class="comment"># 文件复制</span></span><br><span class="line">mv docker/* /home/docker-log</span><br><span class="line"><span class="comment"># 删除原来/var/lib下的docker文件夹</span></span><br><span class="line">rm -rf docker</span><br><span class="line"><span class="comment"># 进入/dome/docker-log创建软连接</span></span><br><span class="line">ln -s /home/docker-log /var/lib/docker</span><br></pre></td></tr></table></figure></li><li><p>重启服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker.service</span><br><span class="line">docker info <span class="comment"># 查看是否成功</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="二，修改镜像和容器的存放路径"><a href="#二，修改镜像和容器的存放路径" class="headerlink" title="二，修改镜像和容器的存放路径"></a>二，修改镜像和容器的存放路径</h3><p>指定镜像和容器存放路径的参数是–graph=/var/lib/docker，我们只需要修改配置文件指定启动参数即可。</p><p>Docker 的配置文件可以设置大部分的后台进程参数，在各个操作系统中的存放位置不一致，在 Ubuntu 中的位置是：/etc/default/docker，在 CentOS 中的位置是：/etc/sysconfig/docker。</p><p>如果是 CentOS6 则添加下面这行：</p><p>OPTIONS=–graph=”/root/data/docker” –selinux-enabled -H fd://</p><p>如果是 Ubuntu 则添加下面这行（因为 Ubuntu 默认没开启 selinux）：</p><p>OPTIONS=–graph=”/root/data/docker” -H fd://# 或者DOCKER_OPTS=”-g /root/data/docker”</p><p>最后重新启动，Docker 的路径就改成 /root/data/docker 了。</p><p>centos7下，也可以</p><p>修改docker.service文件，使用-g参数指定存储位置</p><p>vi /usr/lib/systemd/system/docker.service  </p><p>ExecStart=/usr/bin/dockerd –graph /new-path/docker </p><p> // reload配置文件 </p><p>systemctl daemon-reload </p><p> // 重启docker </p><p>systemctl restart docker.service</p><p><font color="red"><strong>如果docker是1.12或以上的版本，可以修改（或新建）daemon.json文件。修改后会立即生效，不需重启docker服务。</strong></font></p><p>vim /etc/docker/daemon.json </p><p>{“registry-mirrors”: [“<a href="http://7e61f7f9.m.daocloud.io&quot;],&quot;graph&quot;" target="_blank" rel="noopener">http://7e61f7f9.m.daocloud.io&quot;],&quot;graph&quot;</a>: “/new-path/docker”}</p><h3 id="三，system下创建配置文件"><a href="#三，system下创建配置文件" class="headerlink" title="三，system下创建配置文件"></a>三，system下创建配置文件</h3><p>在/etc/systemd/system/docker.service.d 目录下创建一个Drop-In文件“docker.conf”，默认 docker.service.d 文件夹不存在。所以你必须先创建它。</p><p>创建Drop-In 文件的原因，是我们希望Docker 服务，使用docker.conf文件中提到的特定参数，将默认服务所使用的位于/lib/systemd/system/docker.service文件中的参数进行覆盖。如果你想深入了解Drop-In，请阅读<a href="https://goo.gl/7KzBGT" target="_blank" rel="noopener">system.unit</a>文档</p><p><strong>定义新的存储位置</strong>现在打开docker.conf增加如下内容：</p><p># sudo vi /etc/systemd/system/docker.service.d/docker.conf </p><p>[Service] </p><p>ExecStart= </p><p>ExecStart=/usr/bin/dockerd –graph=”/mnt/new_volume” –storage-driver=devicemapper</p><p>保存并退出VI编辑器，/mnt/new_volume 是新的存储位置，而devicemapper是当前docker所使用的存储驱动。如果你的存储驱动有所不同，请输入之前第一步查看并记下的值。Docker<a href="https://goo.gl/VnHP61" target="_blank" rel="noopener">官方文档</a>中提供了更多有关各种存储驱动器的信息。现在，你可以重新加载服务守护程序，并启动Docker服务了。这将改变新的镜像和容器的存储位置。</p><p># sudo systemctl daemon-reload </p><p># sudo systemctl start docker</p><p>为了确认一切顺利，运行 # docker info 命令检查Docker 的根目录.它将被更改为/mnt/new_volume</p><h3 id="四，使用docker-storage-set（docker1-12）命令进行配置"><a href="#四，使用docker-storage-set（docker1-12）命令进行配置" class="headerlink" title="四，使用docker-storage-set（docker1.12）命令进行配置"></a>四，使用docker-storage-set（docker1.12）命令进行配置</h3><p>配置文件位置：<strong>/usr/lib/docker-storage-setup/docker-storage-setup</strong>或者<strong>/etc/sysconfig/docker-storage-setup、/etc/sysconfig/docker-storage</strong></p><p>vim /etc/sysconfig/docker-storage</p><p># This file may be automatically generated by an installation program.</p><p># Please DO NOT edit this file directly. Instead edit</p><p># /etc/sysconfig/docker-storage-setup and/or refer to</p><p># “man docker-storage-setup”.</p><p># By default, Docker uses a loopback-mounted sparse file in</p><p># /var/lib/docker.  The loopback makes it slower, and there are some</p><p># restrictive defaults, such as 100GB max storage.</p><p>DOCKER_STORAGE_OPTIONS=–graph=”要保存的路径”</p><p>或者</p><p>DEVS=/dev/vdb</p><p>DATA_SIZE=800GB（更改docker默认存储大小）</p><p><a href="https://blog.51cto.com/forangela/1949947" target="_blank" rel="noopener">参考连接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认安装完成docker后docker的所有images及相关信息存储位置为：/var/lib/docker&lt;/p&gt;
&lt;p&gt;镜像默认路径: /var/lib/docker/containers/&lt;/p&gt;
&lt;p&gt;而通常我们的系统盘挂载一般不会很大，所以需要将其移到其他分区，我
      
    
    </summary>
    
    
      <category term="docker" scheme="https://hj0913.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>jenkins安装(yum源安装)</title>
    <link href="https://hj0913.github.io/2019/07/18/jenkins%E5%AE%89%E8%A3%85-yum%E6%BA%90%E5%AE%89%E8%A3%85/"/>
    <id>https://hj0913.github.io/2019/07/18/jenkins安装-yum源安装/</id>
    <published>2019-07-18T07:40:36.000Z</published>
    <updated>2019-07-24T08:25:11.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，前沿"><a href="#一，前沿" class="headerlink" title="一，前沿"></a>一，前沿</h3><ol><li><p>Jenkins是什么？<br>Jenkins是一个开源的支持自动化构建，部署等任务的平台。基本上可以说是持续集成(CI),持续发布(CD)不可缺的工具。Jenkins的<a href="https;//jenkins.io">官方地址</a></p></li><li><p>本篇环境信息</p><table><thead><tr><th>工具/环境</th><th>版本</th></tr></thead><tbody><tr><td>Linux Server</td><td>CentOS 7</td></tr><tr><td>Jenkins</td><td>2.121.2</td></tr><tr><td>JDK</td><td>1.8.0_181</td></tr></tbody></table></li><li><p>准备工作<br>安装jdk,安装maven</p><h3 id="二，安装Jenkins"><a href="#二，安装Jenkins" class="headerlink" title="二，安装Jenkins"></a>二，安装Jenkins</h3></li><li><p>yum源的安装</p><ul><li><p>yum源导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加Yum源</span></span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line"><span class="comment">#导入密钥</span></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y jenkins</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开放端口<br>Jenkins站点的默认监听端口是8080</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>配置Java可选路径<br> 因为Jenkins默认的java可选路径不包含我们部署的jdk路径，所以这里要配置一下，不然Jenkins服务会启动失败</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改jenkins启动脚本</span></span><br><span class="line">sudo vi /etc/init.d/jenkins</span><br><span class="line"><span class="comment">#修改candidates增加java可选路径：/usr/java/jdk1.8.0_181/bin/java</span></span><br><span class="line">candidates=<span class="string">"</span></span><br><span class="line"><span class="string">/etc/alternatives/java</span></span><br><span class="line"><span class="string">/usr/lib/jvm/java-1.8.0/bin/java</span></span><br><span class="line"><span class="string">/usr/lib/jvm/jre-1.8.0/bin/java</span></span><br><span class="line"><span class="string">/usr/lib/jvm/java-1.7.0/bin/java</span></span><br><span class="line"><span class="string">/usr/lib/jvm/jre-1.7.0/bin/java</span></span><br><span class="line"><span class="string">/usr/bin/java</span></span><br><span class="line"><span class="string">/usr/java/jdk1.8.0_181/bin/java</span></span><br></pre></td></tr></table></figure></li><li><p>启动Jenkins并设置Jenkins开机启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重载服务（由于前面修改了Jenkins启动脚本）</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment">#启动Jenkins服务</span></span><br><span class="line">sudo systemctl start jenkins</span><br><span class="line"><span class="comment">#将Jenkins服务设置为开机启动</span></span><br><span class="line"><span class="comment">#由于Jenkins不是Native Service，所以需要用chkconfig命令而不是systemctl命令</span></span><br><span class="line">sudo /sbin/chkconfig jenkins on</span><br></pre></td></tr></table></figure><p> 浏览器输入 http://<ip address>:8080 访问Jenkins</ip></p><h3 id="三，Jenkins初始化"><a href="#三，Jenkins初始化" class="headerlink" title="三，Jenkins初始化"></a>三，Jenkins初始化</h3></li><li><p>解锁Jenkins<br> 查询root账号默认密码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkinsstart.png" alt="jenkins初始化"></p></li><li><p>选择插件<br> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins-getting-started-plugin-select.png-kblb.png" alt="jenkins选择插件"><br> 可以选择安装推荐的插件，也可以选择自定义的插件安装，其中这里我选择了第二种。<br> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/jenkins-getting-started-plugin-init.png-kblb.png" alt="jenkins初始化安装插件"></p></li><li><p>添加管理员<br> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/jenkins-getting-started-admin-add.png-kblb.png" alt="创建用户"></p></li><li><p>配置Jenkins URL<br>如果由域名的话可以填入域名，之后也可以修改；在系统管理=&gt;系统设置 <strong>Jenkins Location</strong>中设置<br> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/jenkins-getting-started-config-url.png-kblb.png" alt="配置URL"></p></li><li><p>开始使用Jenkins<br>配置完Jenkins URL之后就完成了整个Jenkins配置引导<br> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/jenkins-getting-started-done.png-kblb.png" alt="开始Jenkins"></p></li><li><p>点击“开始使用Jenkins”就会进入Jenkins主页<br> <img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/jenkins-home.png-kblb.png" alt="Jenkins的主页"></p></li></ol><h3 id="四，Jenkins与git-SSH配置"><a href="#四，Jenkins与git-SSH配置" class="headerlink" title="四，Jenkins与git SSH配置"></a>四，Jenkins与git SSH配置</h3><ol><li><p>首先在jenkins服务器上安装相对应的git工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure></li><li><p>安装好git服务器，可以用gogs，GitLab或者直接使用github，gitee等仓库</p></li><li><p>在Jenkins服务器配置相对应的.ssh目录下配置config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host git.***.com(你设置的jenkins能访问到的git域名)</span><br><span class="line">    HostName git.***.com</span><br><span class="line">    Port 10022(开放的git服务ssh端口)</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa(设置的公钥与私钥对应)</span><br><span class="line">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure><p>在git服务上进行相对应的ssh配置将jenkins生成的id_rsa.pub文件</p></li><li><p>这样配置你的jenkins服务器上应该能够clone相关的代码。如果jenkins服务与git服务放在一台服务上jenkins的web服务应该能拉取相关的代码，如果2台分开部署如何配置呢？</p></li><li><p>在jenkins的安装目录下进行ssh配置在/var/lib/jenkins创建相关的.ssh文件，设置相关的config以及私钥</p></li><li><p>在jenkins的web页面进行相关的配置将相对应的配置创建相关的密钥对应</p></li></ol><h3 id="五，Jenkins中JAVA-MAVEN配置"><a href="#五，Jenkins中JAVA-MAVEN配置" class="headerlink" title="五，Jenkins中JAVA,MAVEN配置"></a>五，Jenkins中JAVA,MAVEN配置</h3><ol><li>在jenkins服务器中安装相对应的JAVA环境，然后再系统管理中全局环境变量设置相对应的JAVA_HOME的环境</li><li>maven配置，安装相关的maven插件Pipeline Maven Integration，配置相关的.m2文件</li></ol><h3 id="六，在Jenkins中配置nodejs"><a href="#六，在Jenkins中配置nodejs" class="headerlink" title="六，在Jenkins中配置nodejs"></a>六，在Jenkins中配置nodejs</h3><ol><li><p>在centos中安装nodejs</p><ul><li><p>新建目录/opt/mnt</p></li><li><p>选择你相应的版本<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">官网下载对应的版本</a></p></li><li><p>下载nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/download/release/v8.12.0/node-v8.12.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxcf -C node-v8.12.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>进入解压目录下的bin目录,执行ls命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv node-v8.12.0-linux-x64 node</span><br><span class="line"><span class="built_in">cd</span> node/bin &amp;&amp; ls</span><br></pre></td></tr></table></figure></li></ul><pre><code>有node和npm测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node -v</span><br></pre></td></tr></table></figure>显示版本号即代表成功</code></pre><ul><li><p>现在 <code>node</code> 和 <code>npm</code> 还不能全局使用，做个链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/mnt/node/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">  ln -s /opt/mnt/node/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure></li></ul><pre><code>至此node就安装成功了</code></pre><ol start="2"><li><p>jenkins中配置nodejs</p><p><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/1563848937513.png" alt="1563848937513"></p></li><li><p>全局安装相应的angular的框架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli@7.3.9</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>修改npm的淘宝镜像，在/var/lib/jenkins的目录下创建相关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo su -s /bin/bash jenkins <span class="comment">#登录jenkins</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/jenkins</span><br><span class="line">touch .npmrc</span><br><span class="line">vi .npmrc</span><br><span class="line">registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></li></ol><h3 id="七，jenkins修改用户运行"><a href="#七，jenkins修改用户运行" class="headerlink" title="七，jenkins修改用户运行"></a>七，jenkins修改用户运行</h3><ol><li><p>解决登录jenkins的问题，由于jenkins在运行时可以选择用户进行运行；</p><ul><li><p>打开Jenkins配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>找到如下行：</p><p>将原来的Jenkins用户修改为root用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$JENKINS_USER=&quot;root&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>修改Jenkins相关文件夹用户权限</p><p>更改jenkins三个文件夹的用户所属用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root /var/lib/jenkins   jenkins的home目录</span><br><span class="line">chown -R root:root /var/cache/jenkins jenkins的缓存目录</span><br><span class="line">chown -R root:root /var/<span class="built_in">log</span>/jenkins   jenkins的日志目录</span><br></pre></td></tr></table></figure></li><li><p>重启jenkins</p><p>重启jenkins服务并检查运行Jenkins的用户是否已经切换为root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart jenkins</span><br><span class="line">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure><p>若显示为root用户，则表示修改完成</p></li></ul><h3 id="八，报错解决"><a href="#八，报错解决" class="headerlink" title="八，报错解决"></a>八，报错解决</h3><ol><li><p>jenkins登录不了Harbor问题</p><p> 错误内容：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.34/version: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure><p> 解决方案：</p><ul><li><p>优先参考官方<a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noopener">Manage Docker as a non-root user</a></p></li><li><p>关闭虚拟机的selinux（可能有用）。参考<a href="http://blog.51cto.com/bguncle/957315" target="_blank" rel="noopener">查看 SELinux状态及关闭SELinux</a></p></li><li><p>在虚拟机中修改<code>/var/run/docker.sock</code>的权限。（很危险！！！）(不推荐)</p><p>终极解决方案：</p><p>错误原因是，在push之前，需要使用docker login命令完成登录</p><p>但是Jenkins job的命令是以伪用户jenkins的名义执行的，因此无法直接在jenkins账户完成登录，那么如何解决呢？</p></li><li><p>使用root账户完成登录</p></li><li><p>将/root/目录下的.docker目录复制到/var/lib/jenkins jenkins的家目录</p></li><li><p>修改文件夹权限chown -R jenkins:jenkins .docker</p><p>原理是：登录成功后会在.docker中生成一个config.json文件，里面保存了认证的信息，以后每次执行docker pull/push时，都会通过检测该文件确定用户是否已完成认证。</p><p><a href="https://blog.csdn.net/mydeman/article/details/79042848" target="_blank" rel="noopener">参考文档1</a></p><p><a href="https://my.oschina.net/raindroid/blog/1579639" target="_blank" rel="noopener">参考文档2</a></p></li></ul></li><li><p>切换jenkins用户登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -s /bin/bash jenkins</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>解决jenkins拉取不了私服代码的问题<br><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/clipboard_20190723100820.png" alt="1563847680915"></p><ul><li><p>首先登录jenkins </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su -s /bin/bash jenkins</span><br><span class="line">ssh-keygen</span><br><span class="line">Key has been generated</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><a href="https://stackoverflow.com/questions/15174194/jenkins-host-key-verification-failed" target="_blank" rel="noopener">参考地址</a></li></ul><ol start="4"><li><p>Jenkins远程连接linux</p><p> 由于配置原因造成一下错误</p><p> 错误：jenkins.plugins.publish_over.BapPublisherException: Failed to connect session for config [131]. Message [Auth fail]</p><p> 配置方法：</p><ul><li><p>生成密钥</p><p>在我的jenkins服务器上/var/lib/jenkins用户目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen <span class="comment"># 密钥生成路径直接默认回车</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys <span class="comment"># 将公钥拷贝到authorized_keys文件</span></span><br><span class="line">scp authorized_keys user@ip:/root/.ssh <span class="comment">#将生成的authorized_keys拷贝到要连接的linux机器上的对应用户下的.ssh文件夹下</span></span><br></pre></td></tr></table></figure></li><li><p>配置SSH server  系统管理-&gt;系统设置</p><p><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/590119-20170718153657958-1551906167.png" alt="系统设置"></p><p>点击测试</p><p><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/jenkins/590119-20170718153902255-554801851.png" alt="test ssh"></p></li><li><p><a href="https://www.cnblogs.com/wangqianqiannb/p/7200791.html" target="_blank" rel="noopener">参考连接</a></p></li></ul></li></ol><h3 id="九，总结"><a href="#九，总结" class="headerlink" title="九，总结"></a>九，总结</h3><p>​        至此yum源安装的jenkins就完毕了，之后会陆续推出相关的docker中安装jenkins，在k8s中使用jenkins的master/salves模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一，前沿&quot;&gt;&lt;a href=&quot;#一，前沿&quot; class=&quot;headerlink&quot; title=&quot;一，前沿&quot;&gt;&lt;/a&gt;一，前沿&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jenkins是什么？&lt;br&gt;Jenkins是一个开源的支持自动化构建，部署等任务的平台。基本上可以说是持
      
    
    </summary>
    
    
      <category term="jenkins" scheme="https://hj0913.github.io/tags/jenkins/"/>
    
      <category term="centos" scheme="https://hj0913.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Harbor安装与配置</title>
    <link href="https://hj0913.github.io/2019/07/18/Harbor%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://hj0913.github.io/2019/07/18/Harbor安装与配置/</id>
    <published>2019-07-18T00:26:33.000Z</published>
    <updated>2019-07-19T09:29:28.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="企业级私有镜像仓库的使用"><a href="#企业级私有镜像仓库的使用" class="headerlink" title="企业级私有镜像仓库的使用"></a>企业级私有镜像仓库的使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​        Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><ul><li><strong>基于角色的访问控制</strong>- 用户与Docker镜像仓库通过“项目”进行组织管理，一个用户可以对多个镜像仓库在同一命名空间（project）里有不同的权限。</li><li><strong>镜像复制</strong> - 镜像可以在多个Registry实例中复制（同步）。尤其适合于负载均衡，高可用，混合云和多云的场景。</li><li><strong>图形化用户界面</strong> - 用户可以通过浏览器来浏览，检索当前Docker镜像仓库，管理项目和命名空间。</li><li><strong>AD/LDAP 支持</strong> - Harbor可以集成企业内部已有的AD/LDAP，用于鉴权认证管理。</li><li><strong>审计管理</strong> - 所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。<br>国际化 - 已拥有英文、中文、德文、日文和俄文的本地化版本。更多的语言将会添加进来。</li><li><strong>RESTful API</strong> - RESTful API 提供给管理员对于Harbor更多的操控, 使得与其它管理软件集成变得更容易。</li><li><strong>部署简单</strong> - 提供在线和离线两种安装工具， 也可以安装到vSphere平台(OVA方式)虚拟设备。</li></ul><h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><p>Harbor被部署为多个Docker容器，因此可以部署在任何支持Docker的Linux发行版上，目标主机需要Docker,并且要安装Docker Compose</p><ul><li><p>硬件</p><table><thead><tr><th>Resource</th><th>Capacity</th><th>Description</th></tr></thead><tbody><tr><td>CPU</td><td>minimal 2 CPU</td><td>4 CPU is preferred</td></tr><tr><td>Mem</td><td>minimal 4GB</td><td>8GB is preferred</td></tr><tr><td>Disk</td><td>minimal 40GB</td><td>160GB is preferred</td></tr></tbody></table></li><li><p>软件</p><table><thead><tr><th>Software</th><th>Version</th><th>Description</th></tr></thead><tbody><tr><td>Docker engine</td><td>version 17.06.0-ce+ or higher</td><td>For installation instructions, please refer to: <a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">docker engine doc</a></td></tr><tr><td>Docker Compose</td><td>version 1.18.0 or higher</td><td>For installation instructions, please refer to: <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">docker compose doc</a></td></tr><tr><td>Openssl</td><td>latest is preferred</td><td>Generate certificate and keys for Harbor</td></tr></tbody></table></li><li><p>网络端口</p><table><thead><tr><th>Port</th><th>Protocol</th><th>Description</th></tr></thead><tbody><tr><td>443</td><td>HTTPS</td><td>Harbor portal and core API will accept requests on this port for https protocol, this port can change in config file</td></tr><tr><td>4443</td><td>HTTPS</td><td>Connections to the Docker Content Trust service for Harbor, only needed when Notary is enabled, This port can change in config file</td></tr><tr><td>80</td><td>HTTP</td><td>Harbor portal and core API will accept requests on this port for http protocol</td></tr></tbody></table></li></ul><h3 id="Harbor安装"><a href="#Harbor安装" class="headerlink" title="Harbor安装"></a>Harbor安装</h3><p>Harbor在github上的<a href="https://github.com/vmware/harbor" target="_blank" rel="noopener">地址</a>，从readme.md中可以知道安装的<a href="https://github.com/vmware/harbor/blob/master/docs/installation_guide.md" target="_blank" rel="noopener">方式</a>分为</p><ul><li><strong>Online installer</strong>（这是harbor的一种安装方式，与本文标题线上搭建无关联）</li><li><strong>Offline installer</strong>（本文主讲）</li><li><strong>OVA installer</strong></li></ul><p>至于Online installer和OVA installer这两种搭建方式，本文不会提及，有兴趣的同学可以自己尝试，相信在看完本文之后你也可以完成自己的Harbor仓库的搭建。</p><h4 id="Offline-installer"><a href="#Offline-installer" class="headerlink" title="Offline installer"></a>Offline installer</h4><p>在官方的<a href="https://github.com/vmware/harbor/releases" target="_blank" rel="noopener">发布版本</a>中,找到一个最新的发布版本（本文写与2019.07.18，官方version为1.8.1）</p><p>下载之后会得到一个类似于harbor-offline-installer-v1.8.1.tgz的文件，用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v1.8.1.tgz</span><br></pre></td></tr></table></figure><h5 id="Harbor目录简介"><a href="#Harbor目录简介" class="headerlink" title="Harbor目录简介"></a>Harbor目录简介</h5><ul><li>harbor.v1.8.1.tar.gz</li><li>harbor.yml 启动harbor时使用的配置文件</li><li>install.sh 是一个shell脚本启动脚本</li><li>LICENSE 该版本许可信息</li><li>prepare python写的初始化脚本</li></ul><h5 id="http安装方式"><a href="#http安装方式" class="headerlink" title="http安装方式"></a>http安装方式</h5><p>安装步骤</p><ul><li><p>配置好harbor.yml</p><p><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/1563438641.jpg" alt="1563438641"></p></li><li><p>运行install.sh 或者(./prepare 再使用docker-compose up -d启动)</p></li><li><p>使用浏览器<a href="http://ip可以访问harbor的web页面" target="_blank" rel="noopener">http://ip可以访问harbor的web页面</a></p></li><li><p>其他docker客户端如何推送到该私有镜像仓库呢？</p><ul><li><p>Harbor的默认安装使用<em>HTTP</em> - 因此，您需要将该选项添加<code>--insecure-registry</code>到客户端的Docker守护程序并重新启动Docker服务。</p></li><li><p>在客户端的docker服务器中的/etc/docker/daemon.josn中配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"insecure-registry"</span>:<span class="string">"harbor服务器的ip"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>登录 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login ip -u admin -p Harbor12345</span><br></pre></td></tr></table></figure></li></ul><h5 id="https安装方式"><a href="#https安装方式" class="headerlink" title="https安装方式"></a>https安装方式</h5><ul><li><p>首先也是配置harbor.yml文件(放开https配置，配置相应的域名)</p></li><li><p>根据<a href="https://github.com/goharbor/harbor/blob/master/docs/configure_https.md" target="_blank" rel="noopener">官方</a>的文档生成对应的ssl密钥文件</p></li><li><p><img src="https://huangjie-1256186459.cos.ap-shanghai.myqcloud.com/blog/1563439550.jpg" alt="1563439550"></p></li><li><p>在对应的dockers客户端的/etc/hosts添加相应的域名解析</p></li><li><p>运行install.sh 或者(./prepare 再使用docker-compose up -d启动)</p></li><li><p>在电脑上配置 C:\Windows\System32\drivers\etc\hosts增加相应的域名解析，使用浏览器在<a href="https://ip可以访问harbor的web页面" target="_blank" rel="noopener">https://ip可以访问harbor的web页面</a></p></li><li><p>登录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login 域名 -u admin -p Harbor12345</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;企业级私有镜像仓库的使用&quot;&gt;&lt;a href=&quot;#企业级私有镜像仓库的使用&quot; class=&quot;headerlink&quot; title=&quot;企业级私有镜像仓库的使用&quot;&gt;&lt;/a&gt;企业级私有镜像仓库的使用&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Harbor" scheme="https://hj0913.github.io/tags/Harbor/"/>
    
      <category term="Docker" scheme="https://hj0913.github.io/tags/Docker/"/>
    
      <category term="docker-compose" scheme="https://hj0913.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>微服务使用场景分析</title>
    <link href="https://hj0913.github.io/2019/07/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90/"/>
    <id>https://hj0913.github.io/2019/07/12/微服务使用场景分析/</id>
    <published>2019-07-12T06:33:25.000Z</published>
    <updated>2019-07-12T06:34:51.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微服务是什么"><a href="#微服务是什么" class="headerlink" title="微服务是什么"></a>微服务是什么</h2><h2 id="微服务能带来什么好处"><a href="#微服务能带来什么好处" class="headerlink" title="微服务能带来什么好处"></a>微服务能带来什么好处</h2><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微服务是什么&quot;&gt;&lt;a href=&quot;#微服务是什么&quot; class=&quot;headerlink&quot; title=&quot;微服务是什么&quot;&gt;&lt;/a&gt;微服务是什么&lt;/h2&gt;&lt;h2 id=&quot;微服务能带来什么好处&quot;&gt;&lt;a href=&quot;#微服务能带来什么好处&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="java" scheme="https://hj0913.github.io/tags/java/"/>
    
      <category term="微服务" scheme="https://hj0913.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>jenkins+gogs+harbor+docker自动化环境部署与安装</title>
    <link href="https://hj0913.github.io/2019/07/12/jenkins-gogs-harbor-docker%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>https://hj0913.github.io/2019/07/12/jenkins-gogs-harbor-docker自动化环境部署与安装/</id>
    <published>2019-07-12T02:46:29.000Z</published>
    <updated>2019-07-12T02:53:58.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一，docker环境安装"><a href="#一，docker环境安装" class="headerlink" title="一，docker环境安装"></a>一，docker环境安装</h2><p>docker 环境的安装在官网上由相关的安装文档，将其写成ansible的脚本的形式</p><h2 id="二，gogs安装"><a href="#二，gogs安装" class="headerlink" title="二，gogs安装"></a>二，gogs安装</h2><h2 id="三，harbor安装"><a href="#三，harbor安装" class="headerlink" title="三，harbor安装"></a>三，harbor安装</h2><h2 id="四，jenkins安装"><a href="#四，jenkins安装" class="headerlink" title="四，jenkins安装"></a>四，jenkins安装</h2><h2 id="五，打包部署应用"><a href="#五，打包部署应用" class="headerlink" title="五，打包部署应用"></a>五，打包部署应用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一，docker环境安装&quot;&gt;&lt;a href=&quot;#一，docker环境安装&quot; class=&quot;headerlink&quot; title=&quot;一，docker环境安装&quot;&gt;&lt;/a&gt;一，docker环境安装&lt;/h2&gt;&lt;p&gt;docker 环境的安装在官网上由相关的安装文档，将其写成a
      
    
    </summary>
    
    
      <category term="jenkins" scheme="https://hj0913.github.io/tags/jenkins/"/>
    
      <category term="harbor" scheme="https://hj0913.github.io/tags/harbor/"/>
    
      <category term="docker" scheme="https://hj0913.github.io/tags/docker/"/>
    
      <category term="java" scheme="https://hj0913.github.io/tags/java/"/>
    
      <category term="gogs" scheme="https://hj0913.github.io/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis源码分析</title>
    <link href="https://hj0913.github.io/2019/06/19/MyBatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://hj0913.github.io/2019/06/19/MyBatis源码分析/</id>
    <published>2019-06-19T13:38:48.000Z</published>
    <updated>2019-06-19T14:14:02.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis源码分析"><a href="#MyBatis源码分析" class="headerlink" title="MyBatis源码分析"></a>MyBatis源码分析</h2><h3 id="MyBatis运行过程"><a href="#MyBatis运行过程" class="headerlink" title="MyBatis运行过程"></a>MyBatis运行过程</h3><ul><li><p>传统的JDBC编程查询数据库代码和过程总结</p><ol><li>加载驱动</li><li>创建连接，Connection对象</li><li>根据Connection创建Statement或者PreparedStatement来执行 sql 语句</li><li>返回结果集到 ResultSet 中</li><li>手动将ResultSet映射到JavaBean中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明Connection对象</span></span><br><span class="line">    Connection con = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//遍历查询结果集</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//创建 connection 对象</span></span><br><span class="line">        con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//使用 connection 对象创建statement 或者 PreparedStatement 类对象，用来执行SQL语句</span></span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        <span class="comment">//要执行的SQL语句</span></span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        <span class="comment">//3.ResultSet类，用来存放获取的结果集！！</span></span><br><span class="line">        ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">      String job = <span class="string">""</span>;</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="comment">//获取stuname这列数据</span></span><br><span class="line">            job = rs.getString(<span class="string">"job"</span>);</span><br><span class="line">            <span class="comment">//获取stuid这列数据</span></span><br><span class="line">            id = rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">            <span class="comment">//输出结果</span></span><br><span class="line">            System.out.println(id + <span class="string">""</span> + job);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">//数据库连接失败异常处理</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rs.close();</span><br><span class="line">        con.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>MyBatis具体流程</p><ol><li>使用配置文件构建SqlSessionFactory</li><li>使用SqlSessionFactory获得SqlSession，SqlSession相当于传统JDBC的Connection</li><li>使用SqlSession得到Mapper</li><li>用Mapper来执行sql语句，并返回结果直接封装到JavaBean中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//获取 sqlSession，sqlSession 相当于传统 JDBC 的 Conection</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"> InputStream configFile = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line"> SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder.build(configFile);</span><br><span class="line"> <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用 sqlSession 获得对应的 mapper，mapper 用来执行 sql 语句。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">get</span><span class="params">(SqlSession sqlSession, <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"> UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"> <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>总结</p><ol><li>初始化阶段 –&gt; 读写XML配置文件和注解中的配置信息，创建配置信息，并完成各个模块的初始化工作</li><li>代理阶段  –&gt; 封装batis编程模型，使用mapper接口开发的初始化工作</li><li>数据读写阶段 –&gt; 通过sqlSession完成sql的解析，参数的映射，SQL的执行和结果反射的过程</li></ol></li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyBatis源码分析&quot;&gt;&lt;a href=&quot;#MyBatis源码分析&quot; class=&quot;headerlink&quot; title=&quot;MyBatis源码分析&quot;&gt;&lt;/a&gt;MyBatis源码分析&lt;/h2&gt;&lt;h3 id=&quot;MyBatis运行过程&quot;&gt;&lt;a href=&quot;#MyBati
      
    
    </summary>
    
    
      <category term="Java" scheme="https://hj0913.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://hj0913.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://hj0913.github.io/2019/06/12/Maven/"/>
    <id>https://hj0913.github.io/2019/06/12/Maven/</id>
    <published>2019-06-12T11:40:41.000Z</published>
    <updated>2019-06-12T11:40:41.555Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sonar+maven+jenkins架构搭建</title>
    <link href="https://hj0913.github.io/2019/06/12/sonar-maven-jenkins%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://hj0913.github.io/2019/06/12/sonar-maven-jenkins架构搭建/</id>
    <published>2019-06-12T09:35:31.000Z</published>
    <updated>2019-06-12T12:31:25.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sonar安装"><a href="#sonar安装" class="headerlink" title="sonar安装"></a>sonar安装</h3><ul><li><h3 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h3></li></ul><h3 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;sonar安装&quot;&gt;&lt;a href=&quot;#sonar安装&quot; class=&quot;headerlink&quot; title=&quot;sonar安装&quot;&gt;&lt;/a&gt;sonar安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;配置Maven&quot;&gt;&lt;a href=&quot;#配置Maven&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="sonar" scheme="https://hj0913.github.io/tags/sonar/"/>
    
      <category term="Jenkins" scheme="https://hj0913.github.io/tags/Jenkins/"/>
    
      <category term="Maven" scheme="https://hj0913.github.io/tags/Maven/"/>
    
  </entry>
  
</feed>
